% load_data_sets.m
%
% Main script to begin processing pipeline, i.e. first entry point into
% processing pipeline. 
%
% This script loads the raw data from .edf format, loads and fixes the
% trigger channel, filters the data (at specified frequency cutoff),
% downsamples the signals (at specified rate), identifies events from
% trigger channel, and generates epochs for each specified trigger event.
%
% Intermediate files following each of these steps can be saved if desired.
% The ultimate output is the creation of a file for each of the
% specified events and for each of the specified trial types (a matrix of
% intermediate result files).
%
% Behavioral data is also analyzed by classifying whether a trial was 
% faulty, determining the reach direction, and computing the reaction time.
%
% The required input is the prefix of the raw EEG data in .edf format.
% 
% Other inputs include (a) the recode segmentation file, (b) the filter
% properties, (c) downsampling properties, (d) desired epoch length, (e)
% desired baseline length
%
% TODO:
% Make it possible to deal with exceptions by specifying them in an
% exception-handling file.
%
% Author: David Huberdeau
% Date: 03/18/2019
% NTB Lab.

%% define inputs and analysis parameters/meta-parameters:

intermediate_data_sufix = '_events';
data_output_event_tag = '_event';
data_output_type_tag = '_type';
filter_cutoff_ = 125;
downsample_rate_ = 512;

%% define directories:
raw_data_dir = '/data/david';
home_dir = '/home/david/sandbox_6_redo';
output_dir = '/home/david/sandbox_6_redo';

%% define per-subject parameters and meta-parameters:
data_file_sets = {...
    {},... 
    {},...
    {},...
    {},...
    {},...
    {},...
    {},...
    {},...
    }; %place all subject's raw EDF files in the cells.

data_output_prefixes = {...
    'P001_',... 
    'P002_',...
    'P003_',...
    'P004_',...
    'P005_',...
    'P006_',...
    'P007_',...
    'P008_',...
    };

% create a structure with fields: 'channels_to_remove', 'filter_highband',
% 'downsample_rate', 
channels_to_remove_sub = {...
    {}, {}, {}, {}, {}, {}, {}, {}};

behavior_dir_set = {...
    '/home/david/behavior/P001',...
    '/home/david/behavior/P002',...
    '/home/david/behavior/P003',...
    '/home/david/behavior/P004',...
    '/home/david/behavior/P005',...
    '/home/david/behavior/P006',...
    '/home/david/behavior/P007',...
    '/home/david/behavior/P008'};

files_ordered_set = {...
    {...
    'P001_RT7372224359011343.mat',...
    'P001_RT7372224386866782.mat',...
    'P001_RT7372224421675926.mat',...
    'P001_RT7372224509525810.mat',... 
    'P001_RT7372224611396181.mat',...
    'P001_RT7372224684190509.mat'...
    },...
    {...
    'behavior1.mat',...
    'behavior2.mat',...
    'behavior3.mat',...
    'behavior4.mat',... 
    'behavior5_mod.mat',...
    'behavior6.mat'...
    },...
    {...
    'P003_RT7372763990099537.mat',...
    'P003_RT7372764016395949.mat',...
    'P003_RT7372764033478472.mat',...
    'P003_RT7372764114438657.mat',... 
    'P003_RT7372767074571064.mat',...
    'P003_RT7372767129948264.mat',...
    },...
    {...
    'P004_RT7373344373809838.mat',...
    'P004_RT7373344405676736.mat',...
    'P004_RT7373344430143981.mat',...
    'P004_RT7373344491853472.mat',... 
    'P004_RT7373344565659260.mat',...
    'P004_RT7373344621776852.mat',...
    },...
    {...
    'P005_RT7374374301507639.mat',...
    'P005_RT7374374329817593.mat',...
    'P005_RT7374374348758912.mat',...
    'P005_RT7374374421247453.mat',... 
    'P005_RT7374394887715509.mat',...
    'P005_RT7374394941626504.mat',...
    },...
    {...
    'P006_RT7374426183684028.mat',...
    'P006_RT7374426209265162.mat',...
    'P006_RT7374426224053820.mat',...
    'P006_RT7374426299147801.mat',... 
    'P006_RT7374426354101620.mat',...
    'P006_RT7374426408364699.mat',...
    },...
    {...
    'P007_RT7374604188552315.mat',...
    'P007_RT7374604208301968.mat',...
    'P007_RT7374604224421296.mat',...
    'P007_RT7374604277606944.mat',... 
    'P007_RT7374604362350579.mat',...
    'P007_RT7374604413455324.mat',...
    },...
    {...
    'P008_RT7374674094876273.mat',...
    'P008_RT7374674120165162.mat',...
    'P008_RT7374674136677083.mat',...
    'P008_RT7374704133775232.mat',... 
    'P008_RT7374704198835648.mat',...
    'P008_RT7374704269164931.mat',...
    }...
};

behavior_files_in_ecog_files = {...
    {[1 2 3 4], [5 6]},...
    {[1 2 3 4], [5 6]},...
    {[1 2 3 4], [5 6]},...
    {[1 2 3 4], [5 6]},...
    {[1 2 3 4], [5 6]},...
    {[1 2 3 4], [5 6]},...
    {[1 2 3 4], [5 6]},...
    {[1 2 3], [4 5] 6}};

input_parameters = struct(...
    'channels_to_remove',[] ,...
    'filter_cutoff', [], ... % Hz
    'downsample_rate', [] ... % new sampling rate (Hz)
    );
for i_sub = 1:length(channels_to_remove_sub)
    input_parameters(i_sub).channels_to_remove = channels_to_remove_sub{i_sub};
    input_parameters(i_sub).filter_cutoff = filter_cutoff_;
    input_parameters(i_sub).downsample_rate = downsample_rate_;
end

%% Define parameters and meta-parameters common for all subject:
% create a structure with fields: 'files_to_save' (as a cell, with possible 
%       options: 'raw', 'filt', 'downsamp', 'baseline', rm_ch'). If none
%       specified, will not save any intermediates. In any case, will 
%       always save the main output which is the events set (.set file) and
%       a matrix of epoch results.
output_prefs = struct(...
    'files_to_save', {}); % save no intermediate files
FORCE_RE_ANALYSIS = 0; %make true if you want analysis to run even if output files already exist.

% define sgc files which specify baseline limits, baselining, and channel
% re-mapping
seg_file_pre = {'precue_BL1.sgc', 'target_BL1.sgc', 'movement_BL1.sgc', 'ready_BL1.sgc'};
seg_file = {'precue_type_BL1.sgc', 'target_type_BL1.sgc', 'movement_type_BL1.sgc', 'ready_type_BL1.sgc'};
arf_file = 'general.arf';

rawcodes_sufix = 'rawcodes_file1.txt';

% TODO: change the workflow so that these parameters are specified in
% separate text files that get loaded by this function.

%% do Main pre-processing 
%   (filter, downsample, baseline, fix trigger, remove channels)

err_sets = cell(1, length(data_file_sets));
for i_sub = 1:length(data_file_sets)
    err_set = cell(1, length(data_file_sets{i_sub}));
    for i_set = 1:length(data_file_sets{i_sub})
        if (~exist([home_dir, filesep, data_file_sets{i_sub}{i_set}, intermediate_data_sufix, '.set'], 'file')) ...
                || FORCE_RE_ANALYSIS
            try
                eeglab_preprocessing_func(raw_data_dir, data_file_sets{i_sub}{i_set}, ...
                    input_parameters, output_prefs);
                disp(['Set ', data_file_sets{i_sub}{i_set}, ' has finished.']);
            catch err
                warning(['Set ', data_file_sets{i_sub}{i_set}, ' has failed.']);
                err_set{i_set} = err;
            end
        end
    end
    err_sets{i_sub} = err_set;
end
%% do epoch step for each event and condition
%   (analyze behavior, select events, define epochs for each trigger type
%   specified).

err_set_epoch = cell(1, length(data_file_sets));
for i_sub = 1:length(behavior_dir_set)
    try
        for i_event = 1:length(seg_file_pre)
            [s, err_out] = recode_main_func(...
                behavior_files_in_ecog_files{i_sub},...
                data_file_sets{i_sub}, ...
                rawcodes_sufix, ...
                [data_output_prefixes{i_sub}, data_output_event_tag, num2str(i_event)],...
                intermediate_data_sufix,...
                behavior_dir_set{i_sub},...
                files_ordered_set{i_sub},...
                home_dir, output_dir, ...
                seg_file_pre{i_event}, seg_file{i_event});
        end
    catch err_recode_
        err_set_epoch{i_sub} = err_recode_;
        warning('Subject recode failed');
    end
end

